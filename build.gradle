/*
 * Copyright 2017 Stefan Neuhaus
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath 'org.sglahn:gradle-dockerfile-plugin:0.4'
    }
}

apply plugin: 'dockerfile'

docker {
    imageName = project.properties.imageName
    imageVersion = '3.0.1-1'
    tags = ['3.0.1-1', 'latest']
    dockerFile = 'build-context/Dockerfile'
    dockerRepository = project.properties.dockerRegistry
}


task clean(type: Delete) {
    group 'DependencyCheck Enterprise Docker'
    description 'Cleans the Docker build context.'
    delete 'build-context'
}

task prepareBuildContext(type: Sync) {
    group 'DependencyCheck Enterprise Docker'
    description 'Prepares the Docker build context.'
    outputs.upToDateWhen { false }
    mustRunAfter clean
    into 'build-context'
    from('.') {
        include 'gradle/wrapper/*'
        include 'gradlew'
    }
    from('src') {
        expand project.properties
        include 'database.gradle'
        include 'update.sh'
        include 'wrapper.sh'
    }
    from("src/mysql") {
        expand project.properties
        include 'Dockerfile'
        include 'initialize.sql'
        include 'initialize.sh'
    }
}
dockerBuild.dependsOn(prepareBuildContext)

task build {
    group 'DependencyCheck Enterprise Docker'
    description 'Builds the Docker image.'
    dependsOn(dockerBuild)
}

task push {
    group 'DependencyCheck Enterprise Docker'
    description 'Pushes the Docker image to the registry.'
    dependsOn(dockerPush)
}
dockerPush.mustRunAfter(build)
